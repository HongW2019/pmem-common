{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PMem Common PMem common package includes native libraries and JNI interface for Intel Optane PMem. Prerequisites Below libraries need to be installed in the machine Memkind Vmemcache Building mvn clean package -Ppersistent-memory,vmemcache","title":"PMem Common"},{"location":"#pmem-common","text":"PMem common package includes native libraries and JNI interface for Intel Optane PMem.","title":"PMem Common"},{"location":"#prerequisites","text":"Below libraries need to be installed in the machine Memkind Vmemcache","title":"Prerequisites"},{"location":"#building","text":"mvn clean package -Ppersistent-memory,vmemcache","title":"Building"},{"location":"OAP-Developer-Guide/","text":"OAP Developer Guide This document contains the instructions & scripts on installing necessary dependencies and building OAP. You can get more detailed information from OAP each module below. SQL Index and Data Source Cache PMem Common PMem Shuffle Remote Shuffle OAP MLlib Arrow Data Source Native SQL Engine Building OAP Prerequisites for Building OAP is built with Apache Maven and Oracle Java 8, and mainly required tools to install on your cluster are listed below. Cmake GCC > 7 Memkind Vmemcache HPNL PMDK OneAPI Arrow Requirements for Shuffle Remote PMem Extension If enable Shuffle Remote PMem extension with RDMA, you can refer to PMem Shuffle to configure and validate RDMA in advance. We provide scripts below to help automatically install dependencies above except RDMA , need change to root account, run: # git clone -b <tag-version> https://github.com/Intel-bigdata/OAP.git # cd OAP # sh $OAP_HOME/dev/install-compile-time-dependencies.sh Run the following command to learn more. # sh $OAP_HOME/dev/scripts/prepare_oap_env.sh --help Run the following command to automatically install specific dependency such as Maven. # sh $OAP_HOME/dev/scripts/prepare_oap_env.sh --prepare_maven Building To build OAP package, run command below then you can find a tarball named oap-$VERSION-bin-spark-$VERSION.tar.gz under directory $OAP_HOME/dev/release-package . $ sh $OAP_HOME/dev/compile-oap.sh Building Specified OAP Module, such as oap-cache , run: $ sh $OAP_HOME/dev/compile-oap.sh --oap-cache Running OAP Unit Tests Setup building environment manually for intel MLlib, and if your default GCC version is before 7.0 also need export CC & CXX before using mvn , run $ export CXX=$OAP_HOME/dev/thirdparty/gcc7/bin/g++ $ export CC=$OAP_HOME/dev/thirdparty/gcc7/bin/gcc $ export ONEAPI_ROOT=/opt/intel/inteloneapi $ source /opt/intel/inteloneapi/daal/2021.1-beta07/env/vars.sh $ source /opt/intel/inteloneapi/tbb/2021.1-beta07/env/vars.sh $ source /tmp/oneCCL/build/_install/env/setvars.sh Run all the tests: $ mvn clean test Run Specified OAP Module Unit Test, such as oap-cache : $ mvn clean -pl com.intel.oap:oap-cache -am test Building SQL Index and Data Source Cache with PMem Prerequisites for building with PMem support When using SQL Index and Data Source Cache with PMem, finish steps of Prerequisites for building to ensure needed dependencies have been installed. Building package You can build OAP with PMem support with command below: $ sh $OAP_HOME/dev/compile-oap.sh Or run: $ mvn clean -q -Ppersistent-memory -Pvmemcache -DskipTests package Contributing This session introduces what is required before submitting a code change to OAP. We continue to use the Github Issues to track the new features/tasks/issues.\u200b For every commit, we need an issue id for the commit. \u200b Format the log message as following: [OAP-IssuesId][optional:ModuleName] detailed message \u200b like [OAP-1406][rpmem-shuffle]Add shuffle block removing operation within one Spark context Always merge your pull request as a single commit and the commit message follow the above format.\u200b The formal features names in 0.9 are: SQL Index , SQL Data Source Cache , Native SQL Engine , Unified Arrow Data Source , RDD Cache PMem Extension , RPMem Shuffle , Remote Shuffle , Intel MLlib . We don\u2019t strictly request the module id the same as the feature name. Please align in the feature members to use a consistent name in the log message.\u200b","title":"OAP Developer Guide"},{"location":"OAP-Developer-Guide/#oap-developer-guide","text":"This document contains the instructions & scripts on installing necessary dependencies and building OAP. You can get more detailed information from OAP each module below. SQL Index and Data Source Cache PMem Common PMem Shuffle Remote Shuffle OAP MLlib Arrow Data Source Native SQL Engine","title":"OAP Developer Guide"},{"location":"OAP-Developer-Guide/#building-oap","text":"","title":"Building OAP"},{"location":"OAP-Developer-Guide/#prerequisites-for-building","text":"OAP is built with Apache Maven and Oracle Java 8, and mainly required tools to install on your cluster are listed below. Cmake GCC > 7 Memkind Vmemcache HPNL PMDK OneAPI Arrow Requirements for Shuffle Remote PMem Extension If enable Shuffle Remote PMem extension with RDMA, you can refer to PMem Shuffle to configure and validate RDMA in advance. We provide scripts below to help automatically install dependencies above except RDMA , need change to root account, run: # git clone -b <tag-version> https://github.com/Intel-bigdata/OAP.git # cd OAP # sh $OAP_HOME/dev/install-compile-time-dependencies.sh Run the following command to learn more. # sh $OAP_HOME/dev/scripts/prepare_oap_env.sh --help Run the following command to automatically install specific dependency such as Maven. # sh $OAP_HOME/dev/scripts/prepare_oap_env.sh --prepare_maven","title":"Prerequisites for Building"},{"location":"OAP-Developer-Guide/#building","text":"To build OAP package, run command below then you can find a tarball named oap-$VERSION-bin-spark-$VERSION.tar.gz under directory $OAP_HOME/dev/release-package . $ sh $OAP_HOME/dev/compile-oap.sh Building Specified OAP Module, such as oap-cache , run: $ sh $OAP_HOME/dev/compile-oap.sh --oap-cache","title":"Building"},{"location":"OAP-Developer-Guide/#running-oap-unit-tests","text":"Setup building environment manually for intel MLlib, and if your default GCC version is before 7.0 also need export CC & CXX before using mvn , run $ export CXX=$OAP_HOME/dev/thirdparty/gcc7/bin/g++ $ export CC=$OAP_HOME/dev/thirdparty/gcc7/bin/gcc $ export ONEAPI_ROOT=/opt/intel/inteloneapi $ source /opt/intel/inteloneapi/daal/2021.1-beta07/env/vars.sh $ source /opt/intel/inteloneapi/tbb/2021.1-beta07/env/vars.sh $ source /tmp/oneCCL/build/_install/env/setvars.sh Run all the tests: $ mvn clean test Run Specified OAP Module Unit Test, such as oap-cache : $ mvn clean -pl com.intel.oap:oap-cache -am test","title":"Running OAP Unit Tests"},{"location":"OAP-Developer-Guide/#building-sql-index-and-data-source-cache-with-pmem","text":"","title":"Building SQL Index and Data Source Cache with PMem"},{"location":"OAP-Developer-Guide/#prerequisites-for-building-with-pmem-support","text":"When using SQL Index and Data Source Cache with PMem, finish steps of Prerequisites for building to ensure needed dependencies have been installed.","title":"Prerequisites for building with PMem support"},{"location":"OAP-Developer-Guide/#building-package","text":"You can build OAP with PMem support with command below: $ sh $OAP_HOME/dev/compile-oap.sh Or run: $ mvn clean -q -Ppersistent-memory -Pvmemcache -DskipTests package","title":"Building package"},{"location":"OAP-Developer-Guide/#contributing","text":"This session introduces what is required before submitting a code change to OAP. We continue to use the Github Issues to track the new features/tasks/issues.\u200b For every commit, we need an issue id for the commit. \u200b Format the log message as following: [OAP-IssuesId][optional:ModuleName] detailed message \u200b like [OAP-1406][rpmem-shuffle]Add shuffle block removing operation within one Spark context Always merge your pull request as a single commit and the commit message follow the above format.\u200b The formal features names in 0.9 are: SQL Index , SQL Data Source Cache , Native SQL Engine , Unified Arrow Data Source , RDD Cache PMem Extension , RPMem Shuffle , Remote Shuffle , Intel MLlib . We don\u2019t strictly request the module id the same as the feature name. Please align in the feature members to use a consistent name in the log message.\u200b","title":"Contributing"},{"location":"OAP-Installation-Guide/","text":"OAP Installation Guide This document introduces how to install OAP and its dependencies on your cluster nodes by Conda* . Follow steps below on every node*** of your cluster to set right environment for each machine. Contents Prerequisites Installing OAP Configuration Prerequisites OS Requirements We have tested OAP on Fedora 29 and CentOS 7.6 (kernel-4.18.16). We recommend you use Fedora 29 CentOS 7.6 or above . Besides, for Memkind we recommend you use kernel above 3.10 . Conda Requirements Install Conda on your cluster nodes with below commands and follow the prompts on the installer screens.: $ wget -c https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh $ chmod +x Miniconda2-latest-Linux-x86_64.sh $ bash Miniconda2-latest-Linux-x86_64.sh For changes to take effect, close and re-open your current shell. To test your installation, run the command conda list in your terminal window. A list of installed packages appears if it has been installed correctly. Installing OAP Dependencies below are required by OAP and all of them are included in OAP Conda package, they will be automatically installed in your cluster when you Conda install OAP. Ensure you have activated environment which you created in the previous steps. Arrow Plasma Memkind Vmemcache HPNL PMDK OneAPI Create a conda environment and install OAP Conda package. $ conda create -n oapenv -y python=3.7 $ conda activate oapenv $ conda install -c conda-forge -c intel -y oap=1.0.0 Once finished steps above, you have completed OAP dependencies installation and OAP building, and will find built OAP jars under $HOME/miniconda2/envs/oapenv/oap_jars Extra Steps for Shuffle Remote PMem Extension If you use one of OAP features -- PMmem Shuffle with RDMA , you need to configure and validate RDMA, please refer to PMem Shuffle for the details. Configuration Once finished steps above, make sure libraries installed by Conda can be linked by Spark, please add the following configuration settings to $SPARK_HOME/conf/spark-defaults.conf . spark.executorEnv.LD_LIBRARY_PATH $HOME/miniconda2/envs/oapenv/lib spark.executor.extraLibraryPath $HOME/miniconda2/envs/oapenv/lib spark.driver.extraLibraryPath $HOME/miniconda2/envs/oapenv/lib spark.executor.extraClassPath $HOME/miniconda2/envs/oapenv/oap_jars/$OAP_FEATURE.jar spark.driver.extraClassPath $HOME/miniconda2/envs/oapenv/oap_jars/$OAP_FEATURE.jar And then you can follow the corresponding feature documents for more details to use them.","title":"OAP Installation Guide"},{"location":"OAP-Installation-Guide/#oap-installation-guide","text":"This document introduces how to install OAP and its dependencies on your cluster nodes by Conda* . Follow steps below on every node*** of your cluster to set right environment for each machine.","title":"OAP Installation Guide"},{"location":"OAP-Installation-Guide/#contents","text":"Prerequisites Installing OAP Configuration","title":"Contents"},{"location":"OAP-Installation-Guide/#prerequisites","text":"OS Requirements We have tested OAP on Fedora 29 and CentOS 7.6 (kernel-4.18.16). We recommend you use Fedora 29 CentOS 7.6 or above . Besides, for Memkind we recommend you use kernel above 3.10 . Conda Requirements Install Conda on your cluster nodes with below commands and follow the prompts on the installer screens.: $ wget -c https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh $ chmod +x Miniconda2-latest-Linux-x86_64.sh $ bash Miniconda2-latest-Linux-x86_64.sh For changes to take effect, close and re-open your current shell. To test your installation, run the command conda list in your terminal window. A list of installed packages appears if it has been installed correctly.","title":"Prerequisites"},{"location":"OAP-Installation-Guide/#installing-oap","text":"Dependencies below are required by OAP and all of them are included in OAP Conda package, they will be automatically installed in your cluster when you Conda install OAP. Ensure you have activated environment which you created in the previous steps. Arrow Plasma Memkind Vmemcache HPNL PMDK OneAPI Create a conda environment and install OAP Conda package. $ conda create -n oapenv -y python=3.7 $ conda activate oapenv $ conda install -c conda-forge -c intel -y oap=1.0.0 Once finished steps above, you have completed OAP dependencies installation and OAP building, and will find built OAP jars under $HOME/miniconda2/envs/oapenv/oap_jars","title":"Installing OAP"},{"location":"OAP-Installation-Guide/#extra-steps-for-shuffle-remote-pmem-extension","text":"If you use one of OAP features -- PMmem Shuffle with RDMA , you need to configure and validate RDMA, please refer to PMem Shuffle for the details.","title":"Extra Steps for Shuffle Remote PMem Extension"},{"location":"OAP-Installation-Guide/#configuration","text":"Once finished steps above, make sure libraries installed by Conda can be linked by Spark, please add the following configuration settings to $SPARK_HOME/conf/spark-defaults.conf . spark.executorEnv.LD_LIBRARY_PATH $HOME/miniconda2/envs/oapenv/lib spark.executor.extraLibraryPath $HOME/miniconda2/envs/oapenv/lib spark.driver.extraLibraryPath $HOME/miniconda2/envs/oapenv/lib spark.executor.extraClassPath $HOME/miniconda2/envs/oapenv/oap_jars/$OAP_FEATURE.jar spark.driver.extraClassPath $HOME/miniconda2/envs/oapenv/oap_jars/$OAP_FEATURE.jar And then you can follow the corresponding feature documents for more details to use them.","title":"Configuration"},{"location":"User-Guide/","text":"PMem Common PMem common package includes native libraries and JNI interface for Intel Optane PMem. Prerequisites Below libraries need to be installed in the machine Memkind Vmemcache Building mvn clean package -Ppersistent-memory,vmemcache","title":"User Guide"},{"location":"User-Guide/#pmem-common","text":"PMem common package includes native libraries and JNI interface for Intel Optane PMem.","title":"PMem Common"},{"location":"User-Guide/#prerequisites","text":"Below libraries need to be installed in the machine Memkind Vmemcache","title":"Prerequisites"},{"location":"User-Guide/#building","text":"mvn clean package -Ppersistent-memory,vmemcache","title":"Building"}]}